# => Exercise1. 

=begin
Write a class UnpredictableString which is a sub-class of String. 
This sub-class should have a method called scramble() which randomly rearranges 
any string as follows:


>ruby unpredictablestring.rb
daano.r n sdt a htIsw taikmgy r
>Exit code: 0

 the original string was: "It was a dark and stormy night."
=end

#############################################################################

# => Exercise2. 
=begin
This exercise thanks to Kathy Sierra. Once upon a time in a software 
shop, two programmers were given the same spec and told to "build it". 
The Really Annoying Project Manager forced the two coders to compete, by promising 
that whoever delivers first gets one of those cool Aeron chairs all the Silicon 
Valley guys have. The spec. There will be shapes on a GUI, a square, a circle and 
a triangle. When the user clicks on a shape, the shape will rotate clockwise 
360 degrees (ie. all the way around) and play an AIF sound file specific to that
 particular shape. Go for it guys and show me your code.

Note: This exercise is about inheritance, method overriding and method overloading 
not about UI.
=end

#############################################################################


# => Exercise3: 
=begin
Here are the program specifications for a simple game to be played 
against the computer.

a. This game is played at the command-line.
b. The game starts when the computer selects three consecutive cells in a 7 cell 
row (from 0 to 6). When that's complete, the game asks for your first guess.
c. Guess the computer's selected cells in the smallest number of guesses. You are
 given a rating or level, based on how well you perform.
d. At the command line, the user types in a number from 0 to 6. The computer 
checks if it's one of the selected cells. If it's a hit, increment the no_of_hits 
variable. In response to your guess, you'll see a result at the command-line: 
either "Hit", "Miss" or "End".
e. When you have guessed all three cells, the game ends by printing out your rating 
(your number of guesses).

Note:
a. Use only the features we have learned so far, in Ruby.
b. You must design the GameBoard class.
c. The testgameboard.rb program uses your GameBoard class
=end


 # testgameboard.rb
require 'gameboard'

# track how many guesses the user makes
no_of_guesses = 0

# instantiate a GameBoard object
gb = GameBoard.new

# make a random number for the first cell,
# and use it to make the cell locations array
random_no = rand(5)
# make an array for the location of the 3
# consecutive ints out of a possible 7
locations = [random_no, random_no+1, random_no+2]

# invoke the setter method of the GameBoard
gb.set_locations_cells(locations)

# variable to track if the game is alive
is_alive = true

while is_alive
puts 'Enter a number: '
STDOUT.flush
user_guess = gets.chomp
# invoke the check_yourself method on the GameBoard object
result = gb.check_yourself(user_guess)
no_of_guesses += 1
if (result == 'kill')
is_alive = false
puts "You took #{no_of_guesses} guesses"
end
end


#############################################################################